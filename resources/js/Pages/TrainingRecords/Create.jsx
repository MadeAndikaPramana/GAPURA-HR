import React, { useState, useEffect } from 'react';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import { Head, Link, useForm } from '@inertiajs/react';
import {
    ArrowLeftIcon,
    InformationCircleIcon,
    MagnifyingGlassIcon,
    CalendarIcon,
    DocumentIcon,
    CheckCircleIcon,
    ExclamationTriangleIcon,
    UserIcon,
    TagIcon,
    BuildingOfficeIcon2
} from '@heroicons/react/24/outline';

export default function Create({ auth, employees, trainingTypes, departments, selectedEmployee = null }) {
    const { data, setData, post, processing, errors, reset } = useForm({
        employee_id: selectedEmployee?.id || '',
        training_type_id: '',
        certificate_number: '',
        issuer: '',
        issue_date: new Date().toISOString().split('T')[0],
        expiry_date: '',
        notes: ''
    });

    const [filteredEmployees, setFilteredEmployees] = useState(employees);
    const [employeeSearch, setEmployeeSearch] = useState(selectedEmployee?.name || '');
    const [selectedTrainingType, setSelectedTrainingType] = useState(null);
    const [calculatedExpiry, setCalculatedExpiry] = useState('');
    const [autoGeneratedCertNumber, setAutoGeneratedCertNumber] = useState('');

    // Filter employees based on search
    useEffect(() => {
        if (employeeSearch) {
            const filtered = employees.filter(emp =>
                emp.name.toLowerCase().includes(employeeSearch.toLowerCase()) ||
                emp.employee_id.toLowerCase().includes(employeeSearch.toLowerCase())
            );
            setFilteredEmployees(filtered);
        } else {
            setFilteredEmployees(employees);
        }
    }, [employeeSearch, employees]);

    // Update selected training type when training_type_id changes
    useEffect(() => {
        if (data.training_type_id) {
            const type = trainingTypes.find(t => t.id == data.training_type_id);
            setSelectedTrainingType(type);

            // Auto-calculate expiry date
            if (data.issue_date && type) {
                const issueDate = new Date(data.issue_date);
                const expiryDate = new Date(issueDate);
                expiryDate.setMonth(expiryDate.getMonth() + type.validity_months);
                const formattedExpiry = expiryDate.toISOString().split('T')[0];
                setCalculatedExpiry(formattedExpiry);
                setData('expiry_date', formattedExpiry);
            }

            // Auto-generate certificate number
            if (data.employee_id && data.issuer && type) {
                generateCertificateNumber(type, data.issuer);
            }
        }
    }, [data.training_type_id, data.issue_date, data.employee_id, data.issuer]);

    // Auto-calculate expiry when issue date changes
    useEffect(() => {
        if (data.issue_date && selectedTrainingType) {
            const issueDate = new Date(data.issue_date);
            const expiryDate = new Date(issueDate);
            expiryDate.setMonth(expiryDate.getMonth() + selectedTrainingType.validity_months);
            const formattedExpiry = expiryDate.toISOString().split('T')[0];
            setCalculatedExpiry(formattedExpiry);
            setData('expiry_date', formattedExpiry);
        }
    }, [data.issue_date, selectedTrainingType]);

    const generateCertificateNumber = async (trainingType, issuer) => {
        if (!trainingType || !issuer) return;

        try {
            const response = await fetch(route('api.training-records.generate-certificate', {
                training_type_id: trainingType.id,
                issuer: issuer
            }));
            const result = await response.json();
            if (result.certificate_number) {
                setAutoGeneratedCertNumber(result.certificate_number);
                if (!data.certificate_number) {
                    setData('certificate_number', result.certificate_number);
                }
            }
        } catch (error) {
            console.error('Error generating certificate number:', error);
        }
    };

    const selectEmployee = (employee) => {
        setData('employee_id', employee.id);
        setEmployeeSearch(employee.name);
        setFilteredEmployees([]);
    };

    const clearEmployeeSelection = () => {
        setData('employee_id', '');
        setEmployeeSearch('');
        setFilteredEmployees(employees);
    };

    const submit = (e) => {
        e.preventDefault();
        post(route('training-records.store'), {
            onSuccess: () => reset(),
        });
    };

    const getSelectedEmployee = () => {
        return employees.find(emp => emp.id == data.employee_id);
    };

    const getCategoryColor = (category) => {
        const colors = {
            safety: 'bg-red-100 text-red-800',
            operational: 'bg-blue-100 text-blue-800',
            security: 'bg-purple-100 text-purple-800',
            technical: 'bg-green-100 text-green-800'
        };
        return colors[category] || 'bg-gray-100 text-gray-800';
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    const getValidityDescription = (months) => {
        if (months < 12) return `${months} month(s)`;
        const years = Math.floor(months / 12);
        const remainingMonths = months % 12;
        if (remainingMonths === 0) return `${years} year(s)`;
        return `${years} year(s) ${remainingMonths} month(s)`;
    };

    return (
        <AuthenticatedLayout
            user={auth.user}
            header={
                <div className="flex items-center space-x-4">
                    <Link
                        href={route('training-records.index')}
                        className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    >
                        <ArrowLeftIcon className="w-4 h-4 mr-2" />
                        Back to Training Records
                    </Link>
                    <div>
                        <h2 className="font-semibold text-xl text-gray-800 leading-tight">
                            Add New Training Record
                        </h2>
                        <p className="text-sm text-gray-600 mt-1">
                            Record a new training certificate for an employee
                        </p>
                    </div>
                </div>
            }
        >
            <Head title="Add Training Record" />

            <div className="py-12">
                <div className="max-w-4xl mx-auto sm:px-6 lg:px-8">
                    <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                        <div className="p-6">
                            {/* Info Banner */}
                            <div className="mb-6 bg-blue-50 border border-blue-200 rounded-md p-4">
                                <div className="flex">
                                    <InformationCircleIcon className="w-5 h-5 text-blue-400 mt-0.5" />
                                    <div className="ml-3">
                                        <h3 className="text-sm font-medium text-blue-800">
                                            Training Record Guidelines
                                        </h3>
                                        <div className="mt-2 text-sm text-blue-700">
                                            <ul className="list-disc pl-5 space-y-1">
                                                <li>Certificate number will be auto-generated if not provided</li>
                                                <li>Expiry date is calculated automatically based on training validity</li>
                                                <li>All fields marked with * are required</li>
                                                <li>Training status will be determined automatically</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <form onSubmit={submit} className="space-y-6">
                                <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">

                                    {/* Employee Selection */}
                                    <div className="lg:col-span-2">
                                        <label htmlFor="employee_search" className="block text-sm font-medium text-gray-700">
                                            Select Employee *
                                        </label>
                                        <div className="mt-1 relative">
                                            <div className="relative">
                                                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                                                <input
                                                    type="text"
                                                    value={employeeSearch}
                                                    onChange={(e) => setEmployeeSearch(e.target.value)}
                                                    className={`block w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-green-500 focus:border-green-500 sm:text-sm ${
                                                        errors.employee_id ? 'border-red-300' : ''
                                                    }`}
                                                    placeholder="Search employee by name or ID..."
                                                />
                                                {data.employee_id && (
                                                    <button
                                                        type="button"
                                                        onClick={clearEmployeeSelection}
                                                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                                                    >
                                                        ×
                                                    </button>
                                                )}
                                            </div>

                                            {/* Employee Search Results */}
                                            {employeeSearch && !data.employee_id && filteredEmployees.length > 0 && (
                                                <div className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm">
                                                    {filteredEmployees.slice(0, 10).map((employee) => (
                                                        <div
                                                            key={employee.id}
                                                            onClick={() => selectEmployee(employee)}
                                                            className="cursor-pointer select-none relative py-2 pl-3 pr-9 hover:bg-gray-50"
                                                        >
                                                            <div className="flex items-center">
                                                                <UserIcon className="w-5 h-5 text-gray-400 mr-2" />
                                                                <div>
                                                                    <div className="font-medium text-gray-900">{employee.name}</div>
                                                                    <div className="text-sm text-gray-500">
                                                                        ID: {employee.employee_id} • {employee.department?.name} • {employee.position}
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                        {errors.employee_id && (
                                            <p className="mt-2 text-sm text-red-600">{errors.employee_id}</p>
                                        )}
                                    </div>

                                    {/* Selected Employee Info */}
                                    {data.employee_id && getSelectedEmployee() && (
                                        <div className="lg:col-span-2 bg-green-50 border border-green-200 rounded-md p-4">
                                            <div className="flex items-center">
                                                <CheckCircleIcon className="w-5 h-5 text-green-400" />
                                                <div className="ml-3">
                                                    <h4 className="text-sm font-medium text-green-800">Selected Employee</h4>
                                                    <div className="mt-1 text-sm text-green-700">
                                                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                            <div>
                                                                <span className="font-medium">Name:</span> {getSelectedEmployee().name}
                                                            </div>
                                                            <div>
                                                                <span className="font-medium">ID:</span> {getSelectedEmployee().employee_id}
                                                            </div>
                                                            <div>
                                                                <span className="font-medium">Department:</span> {getSelectedEmployee().department?.name}
                                                            </div>
                                                            <div>
                                                                <span className="font-medium">Position:</span> {getSelectedEmployee().position}
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    {/* Training Type Selection */}
                                    <div>
                                        <label htmlFor="training_type_id" className="block text-sm font-medium text-gray-700">
                                            Training Type *
                                        </label>
                                        <div className="mt-1">
                                            <select
                                                id="training_type_id"
                                                value={data.training_type_id}
                                                onChange={(e) => setData('training_type_id', e.target.value)}
                                                className={`block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 sm:text-sm ${
                                                    errors.training_type_id ? 'border-red-300' : ''
                                                }`}
                                                required
                                            >
                                                <option value="">Select Training Type</option>
                                                {trainingTypes.map(type => (
                                                    <option key={type.id} value={type.id}>
                                                        {type.name} ({type.code}) - {getValidityDescription(type.validity_months)}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>
                                        {errors.training_type_id && (
                                            <p className="mt-2 text-sm text-red-600">{errors.training_type_id}</p>
                                        )}
                                    </div>

                                    {/* Selected Training Type Info */}
                                    {selectedTrainingType && (
                                        <div className="bg-gray-50 border border-gray-200 rounded-md p-4">
                                            <div className="flex items-center mb-2">
                                                <TagIcon className="w-5 h-5 text-gray-400 mr-2" />
                                                <h4 className="text-sm font-medium text-gray-900">Training Details</h4>
                                            </div>
                                            <div className="space-y-2 text-sm text-gray-600">
                                                <div className="flex items-center">
                                                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(selectedTrainingType.category)}`}>
                                                        {selectedTrainingType.category.charAt(0).toUpperCase() + selectedTrainingType.category.slice(1)}
                                                    </span>
                                                    <span className="ml-2">Validity: {getValidityDescription(selectedTrainingType.validity_months)}</span>
                                                </div>
                                                {selectedTrainingType.description && (
                                                    <p className="text-xs">{selectedTrainingType.description}</p>
                                                )}
                                            </div>
                                        </div>
                                    )}

                                    {/* Certificate Number */}
                                    <div>
                                        <label htmlFor="certificate_number" className="block text-sm font-medium text-gray-700">
                                            Certificate Number
                                        </label>
                                        <div className="mt-1">
                                            <input
                                                type="text"
                                                id="certificate_number"
                                                value={data.certificate_number}
                                                onChange={(e) => setData('certificate_number', e.target.value)}
                                                className={`block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 sm:text-sm ${
                                                    errors.certificate_number ? 'border-red-300' : ''
                                                }`}
                                                placeholder="Auto-generated if left empty"
                                            />
                                        </div>
                                        {autoGeneratedCertNumber && !data.certificate_number && (
                                            <p className="mt-1 text-xs text-green-600">
                                                Will auto-generate: {autoGeneratedCertNumber}
                                            </p>
                                        )}
                                        {errors.certificate_number && (
                                            <p className="mt-2 text-sm text-red-600">{errors.certificate_number}</p>
                                        )}
                                    </div>

                                    {/* Issuer */}
                                    <div>
                                        <label htmlFor="issuer" className="block text-sm font-medium text-gray-700">
                                            Issuing Organization *
                                        </label>
                                        <div className="mt-1">
                                            <input
                                                type="text"
                                                id="issuer"
                                                value={data.issuer}
                                                onChange={(e) => setData('issuer', e.target.value)}
                                                className={`block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 sm:text-sm ${
                                                    errors.issuer ? 'border-red-300' : ''
                                                }`}
                                                placeholder="e.g., GAPURA SAFETY DEPT"
                                                required
                                            />
                                        </div>
                                        {errors.issuer && (
                                            <p className="mt-2 text-sm text-red-600">{errors.issuer}</p>
                                        )}
                                    </div>

                                    {/* Issue Date */}
                                    <div>
                                        <label htmlFor="issue_date" className="block text-sm font-medium text-gray-700">
                                            Issue Date *
                                        </label>
                                        <div className="mt-1 relative">
                                            <CalendarIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                                            <input
                                                type="date"
                                                id="issue_date"
                                                value={data.issue_date}
                                                onChange={(e) => setData('issue_date', e.target.value)}
                                                className={`block w-full pl-10 border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 sm:text-sm ${
                                                    errors.issue_date ? 'border-red-300' : ''
                                                }`}
                                                required
                                            />
                                        </div>
                                        {errors.issue_date && (
                                            <p className="mt-2 text-sm text-red-600">{errors.issue_date}</p>
                                        )}
                                    </div>

                                    {/* Expiry Date */}
                                    <div>
                                        <label htmlFor="expiry_date" className="block text-sm font-medium text-gray-700">
                                            Expiry Date *
                                        </label>
                                        <div className="mt-1 relative">
                                            <CalendarIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                                            <input
                                                type="date"
                                                id="expiry_date"
                                                value={data.expiry_date}
                                                onChange={(e) => setData('expiry_date', e.target.value)}
                                                className={`block w-full pl-10 border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 sm:text-sm ${
                                                    errors.expiry_date ? 'border-red-300' : ''
                                                }`}
                                                required
                                            />
                                        </div>
                                        {calculatedExpiry && (
                                            <p className="mt-1 text-xs text-green-600">
                                                Auto-calculated: {formatDate(calculatedExpiry)}
                                            </p>
                                        )}
                                        {errors.expiry_date && (
                                            <p className="mt-2 text-sm text-red-600">{errors.expiry_date}</p>
                                        )}
                                    </div>
                                </div>

                                {/* Notes */}
                                <div>
                                    <label htmlFor="notes" className="block text-sm font-medium text-gray-700">
                                        Notes (Optional)
                                    </label>
                                    <div className="mt-1">
                                        <textarea
                                            id="notes"
                                            rows={3}
                                            value={data.notes}
                                            onChange={(e) => setData('notes', e.target.value)}
                                            className={`block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500 sm:text-sm ${
                                                errors.notes ? 'border-red-300' : ''
                                            }`}
                                            placeholder="Additional notes about this training record..."
                                        />
                                    </div>
                                    {errors.notes && (
                                        <p className="mt-2 text-sm text-red-600">{errors.notes}</p>
                                    )}
                                </div>

                                {/* Preview */}
                                {data.employee_id && data.training_type_id && data.issue_date && data.expiry_date && (
                                    <div className="bg-gray-50 border border-gray-200 rounded-md p-4">
                                        <h4 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                                            <DocumentIcon className="w-4 h-4 mr-2" />
                                            Training Record Preview
                                        </h4>
                                        <div className="grid grid-cols-2 gap-4 text-sm">
                                            <div>
                                                <span className="font-medium text-gray-700">Employee:</span>
                                                <div className="text-gray-900">{getSelectedEmployee()?.name}</div>
                                                <div className="text-xs text-gray-500">{getSelectedEmployee()?.employee_id}</div>
                                            </div>
                                            <div>
                                                <span className="font-medium text-gray-700">Training:</span>
                                                <div className="text-gray-900">{selectedTrainingType?.name}</div>
                                                <div className="text-xs text-gray-500">{selectedTrainingType?.code}</div>
                                            </div>
                                            <div>
                                                <span className="font-medium text-gray-700">Validity Period:</span>
                                                <div className="text-gray-900">{formatDate(data.issue_date)} - {formatDate(data.expiry_date)}</div>
                                                <div className="text-xs text-gray-500">{getValidityDescription(selectedTrainingType?.validity_months)}</div>
                                            </div>
                                            <div>
                                                <span className="font-medium text-gray-700">Issuer:</span>
                                                <div className="text-gray-900">{data.issuer}</div>
                                                <div className="text-xs text-gray-500">Certificate: {data.certificate_number || autoGeneratedCertNumber}</div>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {/* Form Actions */}
                                <div className="flex items-center justify-end space-x-4 pt-6 border-t border-gray-200">
                                    <Link
                                        href={route('training-records.index')}
                                        className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                                    >
                                        Cancel
                                    </Link>
                                    <button
                                        type="submit"
                                        disabled={processing}
                                        className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
                                    >
                                        {processing ? 'Creating...' : 'Create Training Record'}
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </AuthenticatedLayout>
    );
}
